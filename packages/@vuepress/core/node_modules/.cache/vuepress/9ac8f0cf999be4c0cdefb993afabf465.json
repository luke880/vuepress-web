{"remainingRequest":"F:\\workspace-jg\\middle-web\\vuepress\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\workspace-jg\\middle-web\\vuepress\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!F:\\workspace-jg\\middle-web\\vuepress\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!F:\\workspace-jg\\middle-web\\vuepress\\packages\\@vuepress\\markdown-loader\\index.js??ref--1-2!F:\\workspace-jg\\middle-web\\vuepress\\packages\\docs\\docs\\zh\\miscellaneous\\migration-guide.md?vue&type=template&id=b02f28e8&","dependencies":[{"path":"F:\\workspace-jg\\middle-web\\vuepress\\packages\\docs\\docs\\zh\\miscellaneous\\migration-guide.md","mtime":1683599834223},{"path":"F:\\workspace-jg\\middle-web\\vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683601462315},{"path":"F:\\workspace-jg\\middle-web\\vuepress\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1683601463542},{"path":"F:\\workspace-jg\\middle-web\\vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683601462315},{"path":"F:\\workspace-jg\\middle-web\\vuepress\\node_modules\\vue-loader\\lib\\index.js","mtime":1683601463542},{"path":"F:\\workspace-jg\\middle-web\\vuepress\\packages\\@vuepress\\markdown-loader\\index.js","mtime":1683599833829}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}